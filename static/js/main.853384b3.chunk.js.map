{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DownloadCard","Card","Img","variant","src","this","props","imgSrc","Body","className","title","Container","Text","style","fontSize","lineHeight","text","Footer","Button","approxSize","React","Component","App","state","width","height","updateWindowDimensions","bind","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","codeSectionTheme","monoBlue","authors","name","email","codingSection1","cardDeckContent","Fragment","mainCardStyle","marginTop","marginBottom","boxShadow","border","paddingLeft","paddingRight","backgroundColor","margin","borderRadius","padding","Row","Col","ListGroup","horizontal","parseAuthor","x","i","Item","key","join","authorsArrayMidpoint","Math","floor","length","slice","map","CardDeck","fontFamily","language","showLineNumbers","theme","wrapLines","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.853384b3.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./App.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport { CopyBlock, CodeBlock, monoBlue } from 'react-code-blocks';\n\nclass DownloadCard extends React.Component {\n  render() {\n    return <Card>\n      <Card.Img variant=\"top\" src={this.props.imgSrc} />\n      <Card.Body className=\"text-center\">\n        <br/>\n        <h4>{this.props.title}</h4>\n        <br/>\n        <Container className=\"text-center\">\n          <Card.Text style={{fontSize: '15px', lineHeight: '20px'}}>\n            {this.props.text}\n          </Card.Text>\n        </Container>\n\n      </Card.Body>\n      <Card.Footer className=\"text-center download-card-footer\">\n        <Button variant=\"primary\">Download</Button>\n        <br />\n        <small className=\"text-muted\">approx. {this.props.approxSize}</small>\n      </Card.Footer>\n    </Card>;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  render() {\n    const codeSectionTheme = monoBlue;\n\n    const renderStringText = function(x) {\n      return x.split(\"\\n\").map((y,i) => (\n          <p key={i}>\n            {y}\n          </p>\n      ));\n    };\n\n    const authors = [\n      {\n        name: \"Jordan Ford\",\n        email: [\"jsford\", \"andrew.cmu.edu\"],\n      },\n      {\n        name: \"Khaled Sharif\",\n        email: [\"khaled.sharif\", \"nasa.gov\"],\n      },\n      {\n        name: \"Uland Wong\",\n        email: [\"uland.wong\", \"nasa.gov\"],\n      },\n      {\n        name: \"Red Whittaker\",\n        email: [\"red\",\"cmu.edu\"],\n      },\n      {\n        name: \"Warren Whittaker\",\n        email: [\"warrenw\",\"andrew.cmu.edu\"],\n      },\n      {\n        name: \"Heather Jones\",\n        email: [\"hjones\",\"andrew.cmu.edu\"],\n      }\n    ];\n\n    const bibtex = `\n    @article{\n      FORD2019,\n      author = {Jordan Ford and Patrick Callaghan and Uland Wong \n      and Heather Jones and Warren Whittaker and Red Whittaker},\n      title = {Image and Lidar Dataset of the West Desert Sinkhole: \n      An Analog for Steep-Walled Planetary Pits},\n      conference = {Planetary Pits and Caves Conference},\n      year = {2019},\n    }\n    `;\n\n    const codingSection1 = `\n    \n      x = numpy.linspace(0.0, 1.0, 10000)\n      y = x + 5.0 + numpy.random.uniform(-0.1, 0.1, *x.shape)\n      df = pandas.DataFrame(data={\"x\": x, \"y\": y})\n    \n    `;\n\n    const cardDeckContent = (\n      <React.Fragment>\n        <DownloadCard\n          imgSrc=\"paper.jpg\"\n          title=\"Paper\"\n          text=\"This paper describes the collection apparatus and procedures used\n              to create the dataset, the organization of the dataset, and\n              anticipated applications for the dataset.\"\n          approxSize=\"2 MB\"\n        />\n\n\n        <DownloadCard\n            imgSrc=\"lidar.png\" title=\"LiDAR\"\n            text=\"Combined laser scans provide a dense, precise, textured model of\n              the pit that is useful as ground truth for benchmarking\n              image-derived models and algorithms, for developing and evaluating\n              robot planning, and as a standalone data source for studying\n              planetary pits.\"\n            approxSize=\"10 GB\"\n        />\n\n        <DownloadCard imgSrc=\"images.jpg\"\n                      title=\"Images\"\n                      text=\"Custom camera gantry captured sets of 1500 images from 27\n              locations encircling the West Desert Sinkhole at heights and\n              angles relevant for small rover exploration, mapping, and\n              modeling.\"\n                      approxSize=\"80 GB\"\n                      />\n      </React.Fragment>\n    );\n\n    let mainCardStyle = { marginTop: \"25px\", marginBottom: \"25px\",\n      boxShadow: \"5px 5px 15px 5px rgba(0,0,0,0.1)\",\n      border: 'none',\n      paddingLeft: '50px',\n      paddingRight: '50px',\n      backgroundColor: \"rgb(255,254,254)\",\n    };\n    if (this.state.width < this.state.height) {\n      mainCardStyle = { margin: \"0px\", border: \"none\", borderRadius: '0px', padding: \"0px\" };\n    }\n\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Card style={mainCardStyle}>\n              <Card.Body>\n                <Container className=\"text-center title-font\" style={{padding: '40px'}}>\n                  {(() => {\n                    if (this.state.width > this.state.height) {\n                      return (\n                        <h1>Lunar Pit Photogrammetry: A Terrestrial Dataset</h1>\n                      );\n                    } else if (this.state.width > 768) {\n                      return (\n                        <h3>Lunar Pit Photogrammetry: A Terrestrial Dataset</h3>\n                      );\n                    } else {\n                      return (\n                        <React.Fragment>\n                          <h3>Lunar Pit Photogrammetry</h3>\n                          <h5>A Terrestrial Dataset</h5>\n                        </React.Fragment>\n                      );\n                    }\n                  })()}\n                </Container>\n\n                <hr />\n\n                <ListGroup\n                  horizontal={this.state.width > this.state.height}\n                  className=\"text-center\"\n                >\n                  {(() => {\n                    let parseAuthor = function(x, i) {\n                      return <ListGroup.Item className=\"author-name\" key={i}>\n                        <h5>{x.name}</h5>\n                        <p className=\"text-muted\">{x.email.join(\"@\")}</p>\n                      </ListGroup.Item>;\n                    };\n\n                    const authorsArrayMidpoint = Math.floor(authors.length / 2);\n\n                    if (this.state.width <= 1024 && this.state.width > 425) {\n\n                      return <Container>\n                        <Row>\n                          <Col>\n                            {\n                              authors.slice(0, authorsArrayMidpoint+1).map(parseAuthor)\n                            }\n                          </Col>\n                          <Col>\n                            {\n                              authors.slice(authorsArrayMidpoint+1).map(parseAuthor)\n                            }\n                          </Col>\n                        </Row>\n                      </Container>;\n\n                    } else {\n                      return authors.map(parseAuthor);\n                    }\n\n\n                  })()}\n                </ListGroup>\n\n                <hr style={{ marginBottom: \"50px\" }} />\n\n                <h3 style={{ marginBottom: \"0px\" }}>Abstract</h3>\n                <hr style={{ marginTop: \"5px\" }} />\n\n                <div className=\"text-justify\">\n                  <p style={{ marginBottom: \"75px\" }}>\n                    This work presents a LIDAR and image dataset for studying\n                    steep-walled planetary pits. A custom camera gantry captured\n                    sets of 1500 images from 27 locations encircling the West\n                    Desert Sinkhole at heights and angles relevant for small\n                    rover exploration, mapping, and modeling. The combined laser\n                    scans provide a dense, precise, textured model of the pit\n                    that is useful as ground truth for benchmarking\n                    image-derived models and algorithms, for developing and\n                    evaluating robot planning, and as a standalone data source\n                    for studying planetary pits. All images and laser scans are\n                    localized within a single coordinate frame using a survey\n                    instrument and are publicly available online. This paper\n                    describes the collection apparatus and procedures used to\n                    create the dataset, the organization of the dataset, and\n                    anticipated applications for the dataset.\n                  </p>\n                </div>\n\n                <h3 style={{ marginBottom: \"0px\" }}>Downloads</h3>\n                <hr style={{ marginTop: \"5px\" }} />\n\n                {(() => {\n                  if (this.state.width <= 425) {\n                    return (\n                      <div className=\"card-deck-mobile\">{cardDeckContent}</div>\n                  );\n\n                  } else if (this.state.width <= 768) {\n                    return (\n                        <CardDeck className=\"card-deck-tablet\">{cardDeckContent}</CardDeck>\n                    );\n\n                  } else\n                    {\n                      return <CardDeck>{cardDeckContent}</CardDeck>;\n                  }\n                })()}\n\n                <h3 style={{ marginTop: \"75px\", marginBottom: \"0px\" }}>\n                  Evaluation\n                </h3>\n                <hr style={{ marginTop: \"5px\" }} />\n\n\n                <p style={{ marginBottom: \"25px\"}}>\n                The combined laser\n                scans provide a dense, precise, textured model of the pit\n                that is useful as ground truth for benchmarking\n                image-derived models and algorithms, for developing and\n                evaluating robot planning, and as a standalone data source\n                for studying planetary pits.\n                </p>\n\n\n                <Container style={{fontFamily: 'monospace', padding: 0}}>\n                <CodeBlock\n\n                  text={codingSection1}\n                  language=\"python\"\n                  showLineNumbers={false}\n                  theme={codeSectionTheme}\n                  wrapLines\n                />\n                </Container>\n\n\n                <p style={{ marginTop: \"25px\", marginBottom: \"25px\"}}>\n                The combined laser\n                scans provide a dense, precise, textured model of the pit\n                that is useful as ground truth for benchmarking\n                image-derived models and algorithms, for developing and\n                evaluating robot planning, and as a standalone data source\n                for studying planetary pits.\n                </p>\n\n                <Container style={{fontFamily: 'monospace', padding: 0}}>\n                  <CodeBlock\n\n                      text={codingSection1}\n                      language=\"python\"\n                      showLineNumbers={false}\n                      theme={codeSectionTheme}\n                      wrapLines\n                  />\n                </Container>\n\n                <h3 style={{ marginTop: \"75px\", marginBottom: \"0px\" }}>\n                  Bibtex\n                </h3>\n                <hr style={{ marginTop: \"5px\" }} />\n\n\n                <Container style={{fontFamily: 'monospace', padding: 0}}>\n                  <CodeBlock\n\n                      text={bibtex}\n                      language=\"python\"\n                      showLineNumbers={false}\n                      theme={codeSectionTheme}\n                      wrapLines\n                  />\n                </Container>\n\n                <br/>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}